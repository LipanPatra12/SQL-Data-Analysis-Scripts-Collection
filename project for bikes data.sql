create database bike_pro;

use bike_pro;

/*In this project, I present a comprehensive collection of SQL scripts designed for data analysis.
These scripts cover key analytical areas including database exploration, measures and metrics, time-based trends, 
cumulative analytics, segmentation, and reporting. Each query focuses on a specific analytical theme, following SQL 
best practices to ensure clarity, efficiency, and scalability. Whether you’re exploring a new dataset or building robust 
reporting pipelines, these scripts offer practical tools to quickly extract insights from relational databases.
*/





select*from [gold.dim_products];
select*from [gold.dim_customers];
select*from [gold.fact_sales];
select*from [gold.report_customers];
select*from [gold.report_products];

-- 1-Retrieving a list of unique countries from which customers originate
select distinct country
from [gold.dim_customers]
order by country;

--2-Retrieving a list of unique categories, subcategories, and products name  
select distinct product_name,category,subcategory
from [gold.dim_products]
order by product_name;

-- 3-Determining the first and last order date and the total duration in months

select MIN(order_date)as first_order_date,MAX(order_date)as last_order_date,
DATEDIFF(month,MIN(order_date),MAX(order_date)) as durration
from [gold.fact_sales];

-- Finding the youngest and oldest customer based on birthdate
select  MIN(birthdate) as old,
DATEDIFF(YEAR,MIN(birthdate),GETDATE()) as old_age,
MAX(birthdate) as young,
DATEDIFF(YEAR,max(birthdate),GETDATE()) as young_age
from [gold.dim_customers];


SELECT first_name,birthdate,DATEDIFF(YEAR, birthdate, GETDATE()) AS age
FROM [gold.dim_customers]
where birthdate=(select MIN(birthdate) from [gold.dim_customers])

union all

SELECT first_name,birthdate,DATEDIFF(YEAR, birthdate, GETDATE()) AS age
FROM [gold.dim_customers]
where birthdate=(select Max(birthdate) from [gold.dim_customers]);

-- Generating a Report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Quantity', SUM(quantity) FROM [gold.fact_sales]
UNION ALL
SELECT 'Average Price', AVG(price) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM [gold.fact_sales]
UNION ALL
SELECT 'Total Products', COUNT(DISTINCT product_name) FROM [gold.dim_products]
UNION ALL
SELECT 'Total Customers', COUNT(customer_key) FROM [gold.fact_sales];


-- Finding total customers by countries
select country, COUNT(customer_key) as customer
from [gold.dim_customers]
group by country
order by country;

-- Finding total customers by gender
select gender, COUNT(customer_key) as customer
from [gold.dim_customers]
group by gender;

-- What is the average cost in each category?

SELECT category,AVG(cost) AS avg_cost
FROM [gold.dim_products]
GROUP BY category
ORDER BY avg_cost DESC;


-- What is the total revenue generated for each category?
select category,SUM(sales_amount)
from [gold.fact_sales]
left join [gold.dim_products]
on [gold.fact_sales].product_key=[gold.dim_products].product_key
group by category;

-- What is the total revenue generated by each customer?
SELECT
    c.customer_key,
    c.first_name,
    c.last_name,
    SUM(f.sales_amount) AS total_revenue
FROM [gold.fact_sales] f
LEFT JOIN [gold.dim_customers] c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_revenue DESC;


-- Which 5 products are generating the highest revenue?
select*from [gold.dim_products];
select*from [gold.dim_customers];
select*from [gold.fact_sales];
select*from [gold.report_customers];
select*from [gold.report_products];

select top 5 p.product_name,SUM(f.sales_amount)
from [gold.fact_sales] f
left join [gold.dim_products] p
on p.product_key= f.product_key
group by p.product_name
order by sum(f.sales_amount);



-- Complex but Flexible Ranking Using Window Functions
SELECT *
FROM (
    SELECT
        p.product_name,
        SUM(f.sales_amount) AS total_revenue,
        RANK() OVER (ORDER BY SUM(f.sales_amount) DESC) AS rank_products
    FROM [gold.fact_sales] f
    LEFT JOIN [gold.dim_products] p
        ON p.product_key = f.product_key
    GROUP BY p.product_name
) AS ranked_products
WHERE rank_products <= 5;

---https://medium.com/%40asishgrwl/sql-data-analysis-project-d1b0c3bc223a

-- Finding the top 3 customers with the fewest orders placed
SELECT TOP 3
    c.customer_key,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT order_number) AS total_orders
FROM [gold.fact_sales] f
LEFT JOIN [gold.dim_customers] c
    ON c.customer_key = f.customer_key
GROUP BY 
    c.customer_key,
    c.first_name,
    c.last_name
ORDER BY total_orders asc;

-- Analyzing sales performance over time
SELECT
    YEAR(order_date) AS order_year,
    SUM(sales_amount) AS total_sales,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(quantity) AS total_quantity
FROM [gold.fact_sales]
GROUP BY YEAR(order_date)
ORDER BY YEAR(order_date) ;


-- DATETRUNC()---month(),year(),day() give the same result
SELECT
   month(order_date )AS order_date,
    SUM(sales_amount) AS total_sales,
    COUNT(DISTINCT customer_key) AS total_customers,
    SUM(quantity) AS total_quantity
FROM [gold.fact_sales]
GROUP BY month(order_date)
ORDER BY month(order_date);


-- Calculating the total sales per month and the running total of
-- sales over time
SELECT
 order_date,
 total_sales,
 SUM(total_sales) OVER (ORDER BY order_date) AS running_total_sales 
FROM
(
    SELECT 
        DATETRUNC(year, order_date) AS order_date,
        SUM(sales_amount) AS total_sales,
        AVG(price) AS avg_price
    FROM [gold.fact_sales]
    WHERE order_date IS NOT NULL
    GROUP BY DATETRUNC(year, order_date)
) t

-- Analyzing the yearly performance of products by comparing their sales to
--  the average sales performance of the product 

WITH yearly_product_sales AS (
    SELECT
        YEAR(f.order_date) AS order_year,
        p.product_name,
        SUM(f.sales_amount) AS current_sales
    FROM [gold.fact_sales] f
    LEFT JOIN [gold.dim_products] p
        ON f.product_key = p.product_key
    WHERE f.order_date IS NOT NULL
    GROUP BY 
        YEAR(f.order_date),
        p.product_name
)
SELECT
    order_year,
    product_name,
    current_sales,
    AVG(current_sales) OVER (PARTITION BY product_name) AS avg_sales,
    current_sales - AVG(current_sales) OVER (PARTITION BY product_name) AS diff_avg,
    CASE 
        WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) > 0 THEN 'Above Avg'
        WHEN current_sales - AVG(current_sales) OVER (PARTITION BY product_name) < 0 THEN 'Below Avg'
        ELSE 'Avg'
    END AS avg_change
  FROM yearly_product_sales
ORDER BY  order_year,product_name;


-- Segmenting products into cost ranges and counting how many products
-- fall into each segment
WITH product_segments AS (
    SELECT
        product_key,
        product_name,
        cost,
        CASE 
            WHEN cost < 100 THEN 'Below 100'
            WHEN cost BETWEEN 100 AND 500 THEN '100-500'
            WHEN cost BETWEEN 500 AND 1000 THEN '500-1000'
            ELSE 'Above 1000'
        END AS cost_range
    FROM [gold.dim_products]
)
SELECT 
    cost_range,
    COUNT(product_key) AS total_products
FROM product_segments
GROUP BY cost_range
ORDER BY total_products DESC;


-- Grouping customers into three segments based on their spending behavior:
-- VIP: Customers with at least 12 months of history and spending more than €5,000.
-- Regular: Customers with at least 12 months of history but spending €5,000 or less.
-- New: Customers with a lifespan less than 12 months.
-- and finding the total number of customers by each group.
WITH customer_spending AS (
    SELECT
        c.customer_key,
        SUM(f.sales_amount) AS total_spending,
        MIN(order_date) AS first_order,
        MAX(order_date) AS last_order,
        DATEDIFF(month, MIN(order_date), MAX(order_date)) AS lifespan
    FROM [gold.fact_sales] f
    LEFT JOIN [gold.dim_customers] c
        ON f.customer_key = c.customer_key
    GROUP BY c.customer_key
),
customer_segmented as(

select total_spending,lifespan,customer_key,
case 
    WHEN lifespan >= 12 AND total_spending > 5000 THEN 'VIP'
    WHEN lifespan >= 12 AND total_spending <= 5000 THEN 'Regular'
    ELSE 'New'
END AS customer_segment 
from customer_spending

)
select count(customer_key),customer_segment
FROM customer_segmented

GROUP BY customer_segment;



-- Which categories contribute the most to overall sales?
WITH category_sales AS (
    SELECT
        p.category,
        SUM(f.sales_amount) AS category_total_sales
    FROM [gold.fact_sales] f
    LEFT JOIN [gold.dim_products] p
        ON p.product_key = f.product_key
    GROUP BY p.category
	),
    total_sales AS (
    SELECT SUM(category_total_sales) AS overall_sales
    FROM category_sales
)

SELECT 
    cs.category,
    cs.category_total_sales,
    ROUND((cs.category_total_sales* 100.00) / ts.overall_sales, 1) AS sales_percentage
FROM category_sales cs
CROSS JOIN total_sales ts
ORDER BY sales_percentage DESC;
	


